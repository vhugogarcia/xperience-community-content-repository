namespace XperienceCommunity.ContentRepository.Examples;

/// <summary>
/// Example usage of the custom where methods in PageTypeRepository.
/// </summary>
public class PageCustomWhereUsageExample
{
    private readonly IPageTypeRepository<PageContent> pageRepository;

    public PageCustomWhereUsageExample(IPageTypeRepository<PageContent> pageRepository) =>
        this.pageRepository = pageRepository;

    /// <summary>
    /// Example of using GetByCustomWhereAsync with complex where conditions for web pages.
    /// </summary>
    public async Task<IEnumerable<PageContent>> GetPagesByComplexConditionsAsync() =>
        await pageRepository.GetByCustomWhere(
            where => where
                .WhereContains("PageTitle", "News")
                .And()
                .WhereGreaterOrEquals("PagePublishDate", DateTime.Now.AddDays(-7))
                .And()
                .WhereTrue("PageVisible"),
            languageName: "en-US",
            maxLinkedItems: 3,
            cacheNameParts: ["news", "recent", "visible"]
        );

    /// <summary>
    /// Example of using GetFirstByCustomWhereAsync to get the latest published page.
    /// </summary>
    public async Task<PageContent?> GetLatestPublishedPageAsync() =>
        await pageRepository.GetFirstByCustomWhere(
            where => where
                .WhereTrue("PageVisible")
                .And()
                .WhereNotNull("PagePublishDate"),
            languageName: "en-US",
            maxLinkedItems: 2,
            cacheNameParts: ["latest", "published", "visible"]
        );

    /// <summary>
    /// Example of using GetByCustomWhereAsync with website-specific conditions.
    /// </summary>
    public async Task<IEnumerable<PageContent>> GetPagesByWebsiteChannelAsync(string channelName) =>
        await pageRepository.GetByCustomWhere(
            where => where
                .WhereTrue("PageVisible")
                .And()
                .WhereEquals("WebsiteChannelName", channelName),
            languageName: "en",
            maxLinkedItems: 1,
            cacheNameParts: ["channel", channelName, "visible"]
        );

    /// <summary>
    /// Example of using GetByCustomWhereAsync with path-based filtering.
    /// </summary>
    public async Task<IEnumerable<PageContent>> GetPagesUnderPathAsync(string pathPattern) =>
        await pageRepository.GetByCustomWhere(
            where => where
                .WhereLike("NodeAliasPath", $"{pathPattern}%")
                .And()
                .WhereTrue("PageVisible"),
            languageName: "en",
            maxLinkedItems: 2,
            cacheNameParts: ["path", pathPattern.Replace("/", "_"), "visible"]
        );

    /// <summary>
    /// Example of using GetByCustomWhereAsync with custom cache dependency for pages.
    /// </summary>
    public async Task<IEnumerable<PageContent>> GetPagesWithCustomCacheDependencyAsync() =>
        await pageRepository.GetByCustomWhere(
            where => where
                .WhereTrue("PageVisible")
                .And()
                .WhereGreaterOrEquals("PageViewCount", 500),
            languageName: "en",
            maxLinkedItems: 4,
            dependencyFunc: () => CacheHelper.GetCacheDependency("pages|popular|custom"),
            cacheNameParts: ["popular", "custom-dependency"]
        );

    /// <summary>
    /// Example of using GetByCustomWhereAsync for multi-language content.
    /// </summary>
    public async Task<IEnumerable<PageContent>> GetMultiLanguagePagesAsync() =>
        await pageRepository.GetByCustomWhere(
            where => where
                .WhereTrue("PageVisible")
                .And()
                .WhereNotNull("PageTitle"),
            languageName: "en", 
            maxLinkedItems: 1,
            cacheNameParts: ["multilang", "visible"]
        );
}

/// <summary>
/// Example page content type class (this would typically be generated by Kentico).
/// </summary>
public class PageContent : IWebPageFieldsSource
{
    public WebPageFields SystemFields { get; set; } = null!;
    public string PageTitle { get; set; } = string.Empty;
    public DateTime? PagePublishDate { get; set; }
    public bool PageVisible { get; set; }
    public string WebsiteChannelName { get; set; } = string.Empty;
    public string NodeAliasPath { get; set; } = string.Empty;
    public int PageViewCount { get; set; }
}
