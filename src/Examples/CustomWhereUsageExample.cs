 namespace XperienceCommunity.ContentRepository.Examples;

/// <summary>
/// Example usage of the custom where methods in ContentTypeRepository.
/// </summary>
public class CustomWhereUsageExample
{
    private readonly IContentTypeRepository<ArticleContent> articleRepository;

    public CustomWhereUsageExample(IContentTypeRepository<ArticleContent> articleRepository) =>
        this.articleRepository = articleRepository;

    /// <summary>
    /// Example of using GetByCustomWhere with complex where conditions.
    /// </summary>
    public async Task<IEnumerable<ArticleContent>> GetArticlesByComplexConditionsAsync() =>
        await articleRepository.GetByCustomWhere(
            where => where
                .WhereContains("ArticleTitle", "Technology")
                .And()
                .WhereGreaterOrEquals("ArticleDate", DateTime.Now.AddDays(-30))
                .And()
                .WhereTrue("ArticlePublished"),
            languageName: "en-US",
            maxLinkedItems: 5,
            cacheNameParts: ["technology", "recent", "published"]
        );

    /// <summary>
    /// Example of using GetFirstByCustomWhere to get a single result.
    /// </summary>
    public async Task<ArticleContent?> GetLatestPublishedArticleAsync() =>
        await articleRepository.GetFirstByCustomWhere(
            where => where
                .WhereTrue("ArticlePublished"),
            languageName: "en-US",
            maxLinkedItems: 3,
            cacheNameParts: ["latest", "published"]
        );

    /// <summary>
    /// Example of using GetByCustomWhere with multiple OR conditions.
    /// </summary>
    public async Task<IEnumerable<ArticleContent>> GetArticlesByMultipleCategoriesAsync(List<string> categories) =>
        await articleRepository.GetByCustomWhere(
            where =>
            {
                for (int i = 0; i < categories.Count; i++)
                {
                    if (i == 0)
                    {
                        where.WhereEquals("ArticleCategory", categories[i]);
                    }
                    else
                    {
                        where.Or().WhereEquals("ArticleCategory", categories[i]);
                    }
                }
            },
            languageName: "en-US",
            maxLinkedItems: 2,
            cacheNameParts: ["categories", string.Join("-", categories)]
        );

    /// <summary>
    /// Example of using GetByCustomWhere with custom cache dependency.
    /// </summary>
    public async Task<IEnumerable<ArticleContent>> GetArticlesWithCustomCacheDependencyAsync() =>
        await articleRepository.GetByCustomWhere(
            where => where
                .WhereTrue("ArticlePublished")
                .And()
                .WhereGreaterOrEquals("ArticleViews", 1000),
            languageName: "en-US",
            maxLinkedItems: 5,
            dependencyFunc: () => CacheHelper.GetCacheDependency("articles|popular|custom"),
            cacheNameParts: ["popular", "custom-dependency"]
        );

    
}

/// <summary>
/// Example content type class (this would typically be generated by Kentico).
/// </summary>
public class ArticleContent : IContentItemFieldsSource
{
    public ContentItemFields SystemFields { get; set; } = null!;
    public string ArticleTitle { get; set; } = string.Empty;
    public DateTime ArticleDate { get; set; }
    public bool ArticlePublished { get; set; }
    public string ArticleCategory { get; set; } = string.Empty;
    public int ArticleViews { get; set; }
}
